from pipython import GCSDevice, GCSError, gcserror
import pipython.pitools as pi

import tkinter as tk
import cv2
import PIL.Image,PIL.ImageTk
import threading
from tkinter import ttk
from tkinter import filedialog
import time
import pandas as pd

class Camera:
    def __init__(self):
        self.cap = cv2.VideoCapture(0)
        self.width = 640
        self.height = 480
        self.cap.set(3, self.width)
        self.cap.set(4, self.height)
        self.recticlecb = False

    def show_original(self):
        success, img =  self.cap.read()
        if self.recticlecb == True:
            img = cv2.line(img,(int(self.width/2),0),(int(self.width/2),int(self.height)),(0,0,255),1)
            img = cv2.line(img,(0,int(self.height/2)),(int(self.width), int(self.height/2)),(0,0,255),1)
        return img



class LinearStage:
    def __init__(self,axis, id_serial):
        self.axis = axis
        self.pi_device = GCSDevice()
        self.pi_device.ConnectUSB(id_serial)             #'117020435'
        self.pi_device.EAX(self.axis, 1)                   #'117031466'
        self.pi_device.SVO(self.axis,1)

    def getVel(self):
        return self.pi_device.qVEL(self.axis)

    def movRel(self,pos):
        self.pi_device.MVR(self.axis,pos)

    def setVel (self,vel):
        self.pi_device.VEL(self.axis, vel )

    def waitonTarget(self):
        pi.waitontarget(self.pi_device)

    def InitialiseStage(self):
        self.pi_device.MOV(self.axis, 65)
        pi.waitontarget(self.pi_device)
        self.pi_device.MOV(self.axis,-65)
        pi.waitontarget(self.pi_device)
        self.pi_device.MOV(self.axis,0)


    def movPos(self,pos):
        self.pi_device.MOV(self.axis,pos)


    def getPos(self):
        return self.pi_device.qPOS(self.axis)



    def getTgtPos(self):
        print(self.pi_device.qMOV(self.axis))

    def checkTarget(self):
        print(self.pi_device.qONT(self.axis))

    def checkPosChange(self):
        return self.pi_device.HasPosChanged(self.axis)




class App(tk.Tk, LinearStage,Camera):
    def __init__(self,*args,**kwargs):
        tk.Tk.__init__(self, *args,**kwargs)
        Camera.__init__(self)
        try:
            self.x = LinearStage(1, '117020435')
        except GCSError as exc:
            if exc == gcserror.COM_INVALID_ID__9:
                self.x = None
                print('LinearStage X not connected!')
        try:
            self.y = LinearStage(1,'117031466')
        except GCSError as exc:
            if exc == gcserror.COM_INVALID_ID__9:
                self.y = None
                print('LinearStage Y not connected!')
        self.geometry("1050x1000")
        self.title("Enlitho Laser Interface System")
        container = tk.Frame(self)
        container.grid()

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}


        for F in (Overview, Parameters):
            frame = F(container,self)
            self.frames[F] = frame
            frame.grid(row = 0, column = 0, sticky ='nsew')

        self.mymenu = tk.Menu(self)
        self.config(menu=self.mymenu)

        Main = tk.Menu(self.mymenu)
        WaffleSettings =tk.Menu(self.mymenu)
        self.mymenu.add_cascade(label = "LinearStage", menu = Main)
        self.mymenu.add_cascade(label = "Waffle_Setup", menu = WaffleSettings)
        Main.add_command(label = "Overview", command = lambda: self.show_frame(Overview))
        WaffleSettings.add_command(label = "Parameters", command = lambda:self.show_frame(Parameters))


        self.show_frame(Overview)

    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()




class Overview(tk.Frame):
    def __init__ (self, parent, cont):
        tk.Frame.__init__(self,parent)
        end_column = 10
        begin_column = 0

        self.cont = cont
        self.delay = 50


        tk.Frame.__init__(self,parent)

        ##Current Position##
        self.labelbox = tk.LabelFrame(self, text="Current Position", padx=10, pady=10)
        self.labelbox.grid(row=2, column=begin_column, sticky="NSEW")
        self.xposlabel = tk.Label(self.labelbox, text="X Pos: ").grid(row=1, column=0)
        self.yposlabel = tk.Label(self.labelbox, text="Y Pos: ").grid(row=3, column=0)

        self.xposvar = tk.StringVar()
        self.yposvar = tk.StringVar()

        self.X_POS = tk.Label(self.labelbox, textvariable=self.xposvar, bg="light blue").grid(row=1, column=1)
        self.Y_POS = tk.Label(self.labelbox, textvariable=self.yposvar, bg="light blue").grid(row=3, column=1)

        # create initialisation button
        self.Initialisation_button = tk.Button(self.labelbox, text="Initialisation", width=10, command=lambda:threading.Thread(target = self.Initialise_stage).start())
        self.Initialisation_button.grid(row=4, column=0)

        # Current image
        self.canvas = tk.Canvas(self, height=480, width=640, bd=None, bg='Red')
        self.canvas.grid(row=1, column=0, columnspan=end_column)
        self.recticleCBVar = tk.BooleanVar()
        self.recticleCB = tk.Checkbutton(self, text="Recticle", variable=self.recticleCBVar,
                                         command=lambda: self.changerecCB()).grid(row=2, column=4)

        ######### Velocity
        ## Current Velocity
        self.currentvel = tk.StringVar()   # Variable test label displaying current velocity
        self.SetSlowVelVar = tk.DoubleVar()
        self.SetMediumVelVar = tk.DoubleVar()
        self.SetFastVelVar = tk.DoubleVar()

        self.labelbox0 = tk.LabelFrame(self, text=" Velocity", padx=10, pady=10)
        self.labelbox0.grid(row=3, column=begin_column, sticky="NSEW")
        self.current_vel_label = tk.Label(self.labelbox0, textvariable=self.currentvel, bg="light blue").grid(row=1,
                                                                                                              column=1,
                                                                                                              sticky='NW')
        self.current_vel_label1 = tk.Label(self.labelbox0, text="Current Velocity: ").grid(row=1, column=0)

        ## Set Velocity
        self.setSlowVelLabel = tk.Label(self.labelbox0, text="Set Slow Velocity(mm/s): ").grid(row=2, column=0,
                                                                                               sticky="W")
        self.setSlowVelEntryBox = tk.Entry(self.labelbox0, width=5, textvariable=self.SetSlowVelVar).grid(row=2,
                                                                                                          column=1)
        self.setSlowVelButton = tk.Button(self.labelbox0, text="Confirm", command=lambda: self.set_Vel('SLOW')).grid(row=3,
                                                                                                               column=0,
                                                                                                               columnspan=2)

        self.setMediumVelLabel = tk.Label(self.labelbox0, text="Set Normal Velocity(mm/s): ").grid(row=4, column=0,
                                                                                                   sticky="W")
        self.setMediumVelEntryBox = tk.Entry(self.labelbox0, width=5, textvariable=self.SetMediumVelVar).grid(row=4,
                                                                                                              column=1)
        self.setMediumVelButton = tk.Button(self.labelbox0, text="Confirm", command=lambda: self.set_Vel('MEDIUM')).grid(row=5,
                                                                                                                 column=0,
                                                                                                                 columnspan=2)

        self.setFastVelLabel = tk.Label(self.labelbox0, text="Set Fast Velocity(mm/s): ").grid(row=6, column=0,
                                                                                               sticky="W")
        self.setFastVelEntryBox = tk.Entry(self.labelbox0, width=5, textvariable=self.SetFastVelVar).grid(row=6,
                                                                                                         column=1)
        self.setFastVelButton = tk.Button(self.labelbox0, text="Confirm", command=lambda: self.set_Vel('FAST')).grid(row=7,
                                                                                                               column=0,
                                                                                                               columnspan=2)

        ## Arrow Movement configuration
        self.uparrow = PIL.ImageTk.PhotoImage(file=r"Arrow/arrow_up.png")
        self.downarrow = PIL.ImageTk.PhotoImage(file=r"Arrow/arrow_down.png")
        self.leftarrow = PIL.ImageTk.PhotoImage(file=r"Arrow/arrow_left.png")
        self.rightarrow = PIL.ImageTk.PhotoImage(file=r"Arrow/arrow_right.png")

        self.ArrowMovementFrame = tk.LabelFrame(self, text="Arrow Move", padx=10, pady=10)
        self.ArrowMovementFrame.grid(row=3, column=2, columnspan=4, sticky="NSEW")
        self.uparrowbutton = tk.Button(self.ArrowMovementFrame, width=50, height=50, image=self.uparrow, command = lambda:self.move_arrow_stage('UP')).grid(row=0, column=1)
        self.downarrowbutton = tk.Button(self.ArrowMovementFrame, width=50, height=50, image=self.downarrow, command = lambda:self.move_arrow_stage('DOWN')).grid(row=2,
                                                                                                                  column=1)
        self.leftarrowbutton = tk.Button(self.ArrowMovementFrame, width=50, height=50, image=self.leftarrow, command = lambda:self.move_arrow_stage('LEFT')).grid(row=1,
                                                                                                                  column=0)
        self.rightarrowbutton = tk.Button(self.ArrowMovementFrame, width=50, height=50, image=self.rightarrow, command = lambda:self.move_arrow_stage('RIGHT')).grid(
            row=1, column=3)



        ##Move to Abs Position##
        self.labelbox1 = tk.LabelFrame(self, text="Move to Absolute Position", padx=10, pady=10)
        self.labelbox1.grid(row=2, column=2, sticky="NW")
        self.moveabsposxlabel = tk.Label(self.labelbox1, text="X Pos: ").grid(row=1, column=0)
        self.moveabsposylabel = tk.Label(self.labelbox1, text="Y Pos: ").grid(row=3, column=0)

        self.move_abs_posx_var = tk.DoubleVar()
        self.move_abs_posy_var = tk.DoubleVar()

        self.moveabsposx = tk.Entry(self.labelbox1, width=10, textvariable=self.move_abs_posx_var).grid(row=1, column=1)
        self.moveabsposy = tk.Entry(self.labelbox1, width=10, textvariable=self.move_abs_posy_var).grid(row=3, column=1)
        self.movebutton = tk.Button(self.labelbox1, width=10, text="Confirm", command=lambda: self.set_abs_posx()).grid(
            row=4, column=1)

        ##Move to Rel Position##
        self.labelbox2 = tk.LabelFrame(self, text="Move to Relative Position", padx=10, pady=10)
        self.labelbox2.grid(row=2, column=3)
        self.moverelposxlabel = tk.Label(self.labelbox2, text="X Pos: ").grid(row=1, column=0)
        self.moverelposylabel = tk.Label(self.labelbox2, text="Y Pos: ").grid(row=3, column=0)

        self.move_rel_posx_var = tk.DoubleVar()
        self.move_rel_posy_var = tk.DoubleVar()

        self.moverelposx = tk.Entry(self.labelbox2, width=10, textvariable=self.move_rel_posx_var).grid(row=1, column=1)
        self.moverelposy = tk.Entry(self.labelbox2, width=10, textvariable=self.move_rel_posy_var).grid(row=3, column=1)
        self.movebutton1 = tk.Button(self.labelbox2, width=10, text="Confirm", command=lambda: self.set_rel_posx()).grid(row=4, column=1)

        ##Position Pad##
        self.eventx = 0        #self.eventxy is the mouse clicking position
        self.eventy = 0

        # positionpad label frame
        self.labelframepositionpad = tk.LabelFrame(self, text="Position Pad")
        self.labelframepositionpad.grid(row=1, column=11, sticky="NSEW")

        self.CanvasPositionPad = tk.Canvas(self.labelframepositionpad, height=400, width=400, bd=None, bg='blue')
        self.CanvasPositionPad.grid(row=0, column=0, columnspan=4)
        self.CanvasPositionPad.bind("<Button-1>", self.onclick)

        # target location
        self.targetxvar = tk.StringVar()
        self.targetyvar = tk.StringVar()
        self.targetxlabel = tk.Label(self.labelframepositionpad, text="Target X Pos: ").grid(row=1, column=0)
        self.targetylabel = tk.Label(self.labelframepositionpad, text="Target Y Pos: ").grid(row=1, column=2)
        self.targetxval = tk.Label(self.labelframepositionpad, textvariable=self.targetxvar, bg="light blue").grid(
            row=1, column=1)
        self.targetyval = tk.Label(self.labelframepositionpad, textvariable=self.targetyvar, bg="light blue").grid(
            row=1, column=3)

    #-------------------------Treeview---------------------------------------
        self.treeviewframe = tk.LabelFrame (self,text = "Treeview", padx = 10, pady= 10)
        self.treeviewframe.grid(row = 2, column = 11, rowspan = 10)
        self.treeview = ttk.Treeview(self.treeviewframe)
        self.treeview['columns'] = ("Command","x_value","y_value","step")
        self.treeview.column("#0", width=0, stretch="NO")
        self.treeview.column("Command", anchor="w", width=120)
        self.treeview.column("x_value", anchor="center", width=80)
        self.treeview.column("y_value", anchor="center", width=80)
        self.treeview.column("step", anchor="center", width=80)

        self.treeview.heading("#0", text="", anchor="w")
        self.treeview.heading("Command", text="Command", anchor="w")
        self.treeview.heading("x_value", text="x_value", anchor="w")
        self.treeview.heading("y_value", text="y_value", anchor="w")
        self.treeview.heading("step", text="Step", anchor="center")

        #tree binding
        # self.treeview.bind("<ButtonRelease-1>", self.clickertree)

        self.treeview.grid(row = 0, column  = 0, columnspan = 4)


            #New Data entry
        self.entrybutton = tk.Button(self.treeviewframe, text = "Insert" ,width = 10, command = lambda:self.newentry())
        self.entrybutton.grid(row = 4, column = 0, pady = 5)

            #Remove entry
        self.removentrybutton = tk.Button(self.treeviewframe, text="Remove",width = 10, command=lambda: self.removentry())
        self.removentrybutton.grid(row=4, column=1)

            #moveup entry
        self.moveupentrybutton = tk.Button(self.treeviewframe, text = "Move Up",width = 10, command = lambda: self.moveuptree())
        self.moveupentrybutton.grid(row = 4, column =2)

            #movedown entry
        self.movedownbutton = tk.Button(self.treeviewframe, text = "Move Down",width = 10,  command = lambda: self.movedowntree())
        self.movedownbutton.grid(row = 4, column =3)

            # Import Excel file
        self.filebutton = tk.Button(self.treeviewframe, text  = "Import",width = 10, command = lambda:self.fileopen())
        self.filebutton.grid (row = 5, column  = 0)
            #Clear all in treeview
        self.clearallbutton = tk.Button(self.treeviewframe, text = "Clear All",width = 10, command = lambda:self.clearall())
        self.clearallbutton.grid(row = 5, column = 1)
            # Execute
        self.executetree = tk.Button(self.treeviewframe,  text = "Execute", width = 24, command = lambda:self.executiontree())
        self.executetree.grid(row = 5, column =2, columnspan = 2)

            # Input new data field
        self.commandlabel = tk.Label(self.treeviewframe,text = "Command")
        self.commandlabel.grid(row = 1, column = 0)

        self.treexlabel = tk.Label(self.treeviewframe, text = "x-value")
        self.treexlabel.grid(row = 1, column = 1)

        self.treeylabel = tk.Label(self.treeviewframe, text = "y-label")
        self.treeylabel.grid(row = 1, column  = 2)

        self.step = tk.Label(self.treeviewframe, text = "Step")
        self.step.grid(row =1 , column = 3)

        self.commandentry = tk.Entry(self.treeviewframe, width = 15)
        self.commandentry.grid(row = 2,column = 0)

        self.treexentryx = tk.Entry(self.treeviewframe, width = 15)
        self.treexentryx.grid(row = 2, column =1)

        self.treeyentry = tk.Entry(self.treeviewframe, width = 15)
        self.treeyentry.grid(row=2, column=2)

        self.stepentry = tk.Entry(self.treeviewframe, width = 15)
        self.stepentry.grid(row=2, column=3)
#--------------------------- End of treeview----------------------------


        self.update_canvas()
        self.update_positionpad()



    #----------Treeview function -----------#
    def moveuptree(self):
        rows = self.treeview.selection()
        for row in rows:
            self.treeview.move(row, self.treeview.parent(row), self.treeview.index(row) - 1)

    def movedowntree(self):
        rows = self.treeview.selection()
        for row in reversed(rows):
            self.treeview.move(row, self.treeview.parent(row), self.treeview.index(row) + 1)

    def removentry(self):
        rows = self.treeview.selection()
        print(rows)
        for row in rows:
            self.treeview.delete(row)

        # Open file function

    def fileopen(self):
        filename = filedialog.askopenfilename(initialdir="C:/documents", title="Open file",
                                              filetype=(("xlsx files", "*.xlsx"), ("All Files", "*.*")))
        if filename:
            try:
                file = r"{}".format(filename)
                df = pd.read_excel(file)
                df = df.fillna("")
                df_rows = df.to_numpy().tolist()
            except ValueError:
                print("File could not be read")
            except FileNotFoundError:
                print("File could not be found")
        for row in df_rows:
            self.treeview.insert("", "end", values=row)
        # clear all from treeview

    def clearall(self):
        self.treeview.delete(*self.treeview.get_children())

        # add entry

    def newentry(self):
        if self.commandentry.get() == '' and self.treexentryx.get() == '' and self.treeyentry.get() == '' and self.stepentry.get() == '':
            print('nothing!')
            pass
        else:
            self.treeview.insert('', 'end', values=(
            self.commandentry.get(), self.treexentryx.get(), self.treeyentry.get(), self.stepentry.get()))
            self.commandentry.delete(0, 'end')
            self.treexentryx.delete(0, 'end')
            self.treeyentry.delete(0, 'end')
            self.stepentry.delete(0, 'end')

    def executiontree(self):
        # print("selection: ")
        # for items in self.treeview.selection():
        #     item_text = self.treeview.item(items)
        #     print(item_text)
        #     itemlst = item_text.get('values')
        #     print(type(itemlst[2]))
        #     print(float(itemlst[2]))
        self.executelist = []
        for items in self.treeview.get_children():
            item_text = self.treeview.item(items)
            item_text = item_text.get('values')
            self.executelist.append(item_text)

        command = threading.Thread(target=self.executionfunction, args=(self.executelist,))
        command.start()
        # print(self.executelist)

    def executionfunction(self, instructions):
        for commands in instructions:
            try:
                valx = float(commands[1])
            except:
                print("x value invalid!")
                break
            try:
                valy = float(commands[2])
            except:
                print("y value invalid!")
                break

            if commands[0] == "Move":
                self.cont.x.movPos(valx)
                self.cont.x.waitonTarget()
                # self.cont.y.movPos(valy)
                # self.cont.y.waitonTarget()
                print("finish moving to absolute postions")

            elif commands[0] == "MoveRelative":
                self.cont.x.movRel(valx)
                self.cont.x.waitonTarget()
                # self.cont.y.moveRel(valy)
                # self.cont.y.waitonTarget()
                print("finish moving to relative positions")

            elif commands[0] == "Step":
                step = int(commands[3])
                for iteration in range(step):
                    self.cont.x.movRel(valx)
                    self.cont.x.waitonTarget()
                    print(str(iteration))
            else:
                pass

    #---------- Postion Pad Click ----------#

    def onclick(self,event):
        if self.CanvasPositionPad.canvasx(event.x) <50 or self.CanvasPositionPad.canvasy(event.y) <48 or self.CanvasPositionPad.canvasx(event.x) >360 or self.CanvasPositionPad.canvasy(event.y)>356:
            print("Out of coordinate frame!")
        else:

            self.eventx = self.CanvasPositionPad.canvasx(event.x)
            self.eventy = self.CanvasPositionPad.canvasy(event.y)
            self.pospadx = self.convert_canvas_coord_to_pospad(self.eventx,1)
            self.pospady = self.convert_canvas_coord_to_pospad(self.eventy,2)
            self.targetxvar.set(str(self.pospadx))
            self.targetyvar.set(str(self.pospady))
            try:
                self.cont.x.movPos(self.pospadx)
                self.cont.y.movPos(self.pospady)
            except:
                pass

    def convert_canvas_coord_to_pospad(self,numbers,xy):                   #xy is axis
        if xy == 1:
            scale = 130/310
            magnitude = (numbers - 50)*scale # +2 to the limit
            magnitude = magnitude - 65


        if xy == 2:
            scale = 130/308
            magnitude = (numbers - 48)*scale
            magnitude = 65 - magnitude
        return magnitude

    def convert_pospad_to_canvas_coord(self):
        xpos = float(self.xposvar.get()) + 65.0
        ypos = float(self.yposvar.get()) + 65.0
        xpos = xpos // 130 *310
        ypos = ypos // 130 * 308
        xpos = xpos + 50
        ypos = ypos + 48
        return xpos, ypos




    def update_positionpad(self):
        self.positionpadimg = cv2.imread('PositionPad.png')
        self.positionpadimg = cv2.circle(self.positionpadimg,(int(self.eventx),int(self.eventy)),3,(255,0,0),1)
        try:
            X_POS, Y_POS = self.convert_pospad_to_canvas_coord()
            self.positionpadimg = cv2.circle(self.positionpadimg, (int(X_POS), int(Y_POS)),3,(0,255,0),1)
        except:
            pass
        self.positionpadimg= PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(self.positionpadimg))
        self.CanvasPositionPad.create_image(2,2,image = self.positionpadimg,anchor = tk.NW)
        self.after(self.delay,self.update_positionpad)

    #------------Recticle CB---------------#
    def changerecCB(self):
        self.cont.recticlecb = self.recticleCBVar.get()

    def update_canvas(self):

        #---------get info of current velocity from Linear Stage------
        try:
            self.cur_vel()
        except:
            #print("Current Velocity info not available!")
            pass
        #---------get info from LinearStage
        try:
            self.set_xposvar()
        except:
            #print("Current X-pos value not available!")
            pass

        try:
            self.set_yposvar()
        except:
            #print("Current Y-pos value not available!")
            pass

        #---------------Canvas update---------
        try:
            self.img = self.cont.show_original()
            self.img = cv2.cvtColor(self.img, cv2.COLOR_BGR2RGB)
            self.img = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(self.img))
            self.canvas.create_image(2, 2, image=self.img, anchor=tk.NW)
        except:
            pass

        self.after(self.delay, self.update_canvas)


    #--------------------- LINEAR STAGE COMMAND-----------------
    def cur_vel(self):
        vel = self.cont.x.getVel()
        flt= (vel.get(1))
        self.currentvel.set(str(flt))


    def set_rel_posx(self):
        pos_x = self.move_rel_posx_var.get()
        pos_y = self.move_rel_posy_var.get()
        try:
            self.cont.x.movRel(pos_x)
        except:
            print("x-stage not moving")

        try:
            self.cont.y.movRel(pos_y)
        except:
            print("y-stage not moving!")

    def set_abs_posx(self):
        # posx =self.move_abs_posx_var.get()
        # rounded = round(posx)
        # if rounded >= -65 and rounded <= 65:
        #     self.cont.x.movPos(pos)
        # else:
        #     pass
        pos_x = self.move_abs_posx_var.get()
        pos_y = self.move_abs_posy_var.get()

        try:
            self.cont.x.movPos(pos_x)
        except GCSError as exc:
            if exc == gcserror.E7_PI_CNTR_POS_OUT_OF_LIMITS:
                print("x-stage not moved! Out of limits!")

        try:
            self.cont.y.movPos(pos_y)
        except GCSError as exc:
            if exc == gcserror.E7_PI_CNTR_POS_OUT_OF_LIMITS:
                print("y-stage not moved! Out of limits!")

    def set_xposvar (self):
        val = self.cont.x.getPos()
        flt = (val.get(1))
        self.xposvar.set(str(flt))

    def set_yposvar(self):
        val = self.cont.y.getPos()
        flt = (val.get(1))
        self.yposvar.set(str(flt))

    def set_Vel (self,speed):
        if speed == "FAST":
            val = self.SetFastVelVar.get()
        elif speed =="MEDIUM":
            val = self.SetMediumVelVar.get()
        elif speed =="SLOW":
            val = self.SetSlowVelVar.get()
        try:
            self.cont.y.setVel(val)
        except GCSError as exc:
            if exc == gcserror.PI_CNTR_VEL_OUT_OF_LIMITS:
                print("Velocity out of Limit!")
        try:
            self.cont.x.setVel(val)
        except:
            if exc == gcserror.PI_CNTR_VEL_OUT_OF_LIMITS:
                print("Velocity out of Limit!")

    def Initialise_stage(self):
        try:
            self.cont.x.InitialiseStage()
            print("x-stage finish initialising")
        except:
            print("x-stage not initialised!")
        try:
            self.cont.y.InitialiseStage()
            print("y-stage finish initialising")
        except:
            print("y-stage not initialised!")

    def move_arrow_stage(self,direction):
        if direction == 'UP':
            val = float(self.currentvel.get())* 1
            self.cont.y.movRel(val)
        if direction == 'DOWN':
            val = -1 * float(self.currentvel.get())
            self.cont.y.movRel(val)
        if direction == 'LEFT':
            val = float(self.currentvel.get())* -1
            self.cont.x.movRel(val)
        if direction == 'RIGHT':
            val = float(self.currentvel.get())* 1
            self.cont.x.movRel(val)


class Parameters(tk.Frame):
    def __init__ (self, parent, cont):
        tk.Frame.__init__(self, parent)





app = App()
app.mainloop()
