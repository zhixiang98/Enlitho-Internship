from pipython import GCSDevice,pitools
import tkinter as tk
import cv2
import PIL.Image,PIL.ImageTk
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.ticker import (AutoMinorLocator, MultipleLocator)
import matplotlib.animation as animation
import threading



class LinearStage:
    def __init__(self,axis):
        self.axis = axis

class Camera:
    def __init__(self):
        self.cap = cv2.VideoCapture(0)
        self.width = 640
        self.height = 480
        self.cap.set(3, self.width)
        self.cap.set(4, self.height)
        self.recticlecb = False

    def show_original(self):
        success, img =  self.cap.read()
        if self.recticlecb == True:
            img = cv2.line(img,(int(self.width/2),0),(int(self.width/2),int(self.height)),(0,0,255),1)
            img = cv2.line(img,(0,int(self.height/2)),(int(self.width), int(self.height/2)),(0,0,255),1)
        return img

class App(tk.Tk, Camera, LinearStage):
    def __init__(self,*args,**kwargs):
        tk.Tk.__init__(self, *args,**kwargs)
        Camera.__init__(self)
        self.x = LinearStage(1)
        self.connect = False
        self.geometry("1000x1000")
        container = tk.Frame(self)
        container.grid()

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}


        for F in (Overview, Parameters):
            frame = F(container,self)
            self.frames[F] = frame
            frame.grid(row = 0, column = 0, sticky ='nsew')

        self.mymenu = tk.Menu(self)
        self.config(menu=self.mymenu)
        Main = tk.Menu(self.mymenu)
        WaffleSettings =tk.Menu(self.mymenu)
        self.mymenu.add_cascade(label = "LinearStage", menu = Main)
        self.mymenu.add_cascade(label = "Waffle_Setup", menu = WaffleSettings)
        Main.add_command(label = "Overview", command = lambda: self.show_frame(Overview))
        WaffleSettings.add_command(label = "Parameters", command = lambda:self.show_frame(Parameters))


        self.show_frame(Overview)

    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()




class Overview(tk.Frame):
    def __init__ (self, parent, cont):
        tk.Frame.__init__(self,parent)
        end_column = 10
        begin_column = 0

        self.cont = cont
        self.delay = 80


        tk.Frame.__init__(self,parent)

        ##Current Position##
        self.labelbox = tk.LabelFrame(self, text = "Current Position",padx = 10, pady = 10)
        self.labelbox.grid(row = 2, column =begin_column, sticky = "NSEW")
        self.xposlabel = tk.Label(self.labelbox,text = "X Pos: ").grid(row = 1, column = 0)
        self.yposlabel = tk.Label(self.labelbox, text = "Y Pos: ").grid(row = 3, column = 0)

        self.xposvar = tk.StringVar()
        self.yposvar = tk.StringVar()

        self.X_POS = tk.Label(self.labelbox,textvariable = self.xposvar, bg = "light blue").grid(row = 1, column = 1)
        self.Y_POS = tk.Label(self.labelbox,textvariable = self.yposvar, bg = "light blue").grid(row = 3, column = 1)

        #create initialisation button
        self.Initialisation_button = tk.Button(self.labelbox, text = "Initialisation", width =10, command = lambda:self.Initialise_stage())
        self.Initialisation_button.grid(row = 4, column = 0)
        #Current image
        self.canvas = tk.Canvas(self,height = 480, width = 640,bd =None, bg = 'Red' )
        self.canvas.grid (row =1,column =0,columnspan = end_column)
        self.recticleCBVar = tk.BooleanVar()
        self.recticleCB = tk.Checkbutton(self, text = "Recticle", variable = self.recticleCBVar, command = lambda:self.changerecCB()).grid(row = 2,column = 4)



######### Velocity
        ## Current Velocity
        self.currentvel = tk.StringVar()
        self.SetSlowVelVar = tk.DoubleVar()
        self.SetMediumVelVar = tk.DoubleVar()
        self.SetFastVelVar = tk.DoubleVar()


        self.labelbox0 = tk.LabelFrame(self, text=" Velocity", padx=10, pady=10)
        self.labelbox0.grid(row=3, column=begin_column, sticky = "NSEW")
        self.current_vel_label = tk.Label(self.labelbox0, textvariable =self.currentvel,bg = "light blue").grid(row=1, column=1,sticky = 'NW')
        self.current_vel_label1 = tk.Label(self.labelbox0, text = "Current Velocity: ").grid(row = 1,column = 0)

        ## Set Velocity
        self.setSlowVelLabel = tk.Label(self.labelbox0,text = "Set Slow Velocity(mm/s): ").grid(row = 2, column = 0,sticky = "W")
        self.setSlowVelEntryBox = tk.Entry(self.labelbox0, width = 5, textvariable = self.SetSlowVelVar).grid(row = 2,column =1)
        self.setSlowVelButton = tk.Button(self.labelbox0, text = "Confirm", command = lambda:self.set_Vel()).grid(row = 3,column = 0, columnspan = 2)

        self.setMediumVelLabel = tk.Label(self.labelbox0,text = "Set Normal Velocity(mm/s): ").grid(row = 4, column = 0, sticky = "W")
        self.setMediumVelEntryBox = tk.Entry(self.labelbox0, width=5, textvariable=self.SetMediumVelVar).grid(row=4, column=1)
        self.setMediumVelButton = tk.Button(self.labelbox0, text="Confirm", command=lambda: self.set_Vel()).grid(row=5, column=0, columnspan=2)

        self.setFastVelLabel = tk.Label(self.labelbox0, text="Set Fast Velocity(mm/s): ").grid(row=6, column=0, sticky = "W")
        self.setFastVelLabel = tk.Entry(self.labelbox0, width=5, textvariable=self.SetMediumVelVar).grid(row=6, column=1)
        self.setFastVelButton = tk.Button(self.labelbox0, text="Confirm", command=lambda: self.set_Vel()).grid(row=7, column=0, columnspan=2)

        ## Arrow Movement configuration
        self.uparrow = PIL.ImageTk.PhotoImage(file = r"Arrow/arrow_up.png")
        self.downarrow = PIL.ImageTk.PhotoImage(file = r"Arrow/arrow_down.png")
        self.leftarrow = PIL.ImageTk.PhotoImage(file = r"Arrow/arrow_left.png")
        self.rightarrow = PIL.ImageTk.PhotoImage(file = r"Arrow/arrow_right.png")

        self.ArrowMovementFrame = tk.LabelFrame(self, text = "Arrow Move", padx = 10, pady = 10)
        self.ArrowMovementFrame.grid(row = 3, column = 2, columnspan = 4,sticky = "NSEW")
        self.uparrowbutton = tk.Button(self.ArrowMovementFrame, width = 50, height = 50, image = self.uparrow).grid(row = 0, column = 1)
        self.downarrowbutton = tk.Button(self.ArrowMovementFrame,width = 50, height = 50, image =self.downarrow).grid(row = 2, column = 1)
        self.leftarrowbutton = tk.Button(self.ArrowMovementFrame, width=50, height=50, image=self.leftarrow).grid(row=1, column=0)
        self.rightarrowbutton = tk.Button(self.ArrowMovementFrame, width=50, height=50, image=self.rightarrow).grid(row=1, column=3)



        ##Move to Abs Position##
        self.labelbox1 = tk.LabelFrame(self, text ="Move to Absolute Position",padx = 10, pady = 10)
        self.labelbox1.grid(row = 2, column = 2,sticky = "NW")
        self.moveabsposxlabel = tk.Label(self.labelbox1, text = "X Pos: ").grid(row =1, column =0)
        self.moveabsposylabel = tk.Label(self.labelbox1, text = "Y Pos: ").grid(row =3, column =0)

        self.move_abs_posx_var = tk.DoubleVar()
        self.move_abs_posy_var = tk.DoubleVar()

        self.moveabsposx = tk.Entry(self.labelbox1, width = 10, textvariable = self.move_abs_posx_var ).grid(row = 1,column = 1)
        self.moveabsposy = tk.Entry(self.labelbox1, width  = 10, textvariable = self.move_abs_posy_var).grid(row = 3, column = 1)
        self.movebutton = tk.Button (self.labelbox1, width = 10, text = "Confirm", command = lambda: self.set_abs_posx()).grid(row = 4, column = 1)

        ##Move to Rel Position##
        self.labelbox2 = tk.LabelFrame(self, text="Move to Relative Position", padx=10, pady=10)
        self.labelbox2.grid(row=2, column=3)
        self.moverelposxlabel = tk.Label(self.labelbox2, text="X Pos: ").grid(row=1, column=0)
        self.moverelposylabel = tk.Label(self.labelbox2, text="Y Pos: ").grid(row=3, column=0)

        self.move_rel_posx_var = tk.DoubleVar()
        self.move_rel_posy_var = tk.DoubleVar()

        self.moverelposx = tk.Entry(self.labelbox2, width=10, textvariable=self.move_rel_posx_var).grid(row=1, column=1)
        self.moverelposy = tk.Entry(self.labelbox2, width=10, textvariable=self.move_rel_posy_var).grid(row=3, column=1)
        self.movebutton1 = tk.Button(self.labelbox2, width=10, text="Confirm", command=lambda: self.set_rel_posx()).grid(
            row=4, column=1)

        ##Graphical Coordinate

        self.eventx = 0
        self.eventy = 0

        #empty label frame
        self.labelframepositionpad = tk.LabelFrame(self,text = "Position Pad")
        self.labelframepositionpad.grid(row = 1, column = 11, sticky = "NSEW")

        self.fig = Figure(figsize=(5,5),dpi = 80)
        self.coordinates  = self.fig.add_subplot(111)

        self.coordinates.set_xlim(-65,65)
        self.coordinates.set_ylim(-65,65)

        # Change major ticks to show every 10.
        self.coordinates.xaxis.set_major_locator(MultipleLocator(10))
        self.coordinates.yaxis.set_major_locator(MultipleLocator(10))

        # Change minor ticks to show every 2.
        self.coordinates.xaxis.set_minor_locator(AutoMinorLocator(2))
        self.coordinates.yaxis.set_minor_locator(AutoMinorLocator(2))

        self.coordinates.grid(which = 'major', color = '#CCCCCC', linestyle='--')
        self.coordinates.grid(which = 'minor', color = '#CCCCCC', linestyle = ':')



        self.canvascoordinate = FigureCanvasTkAgg(self.fig,self.labelframepositionpad)
        self.canvascoordinate.get_tk_widget().pack()

        self.fig.canvas.callbacks.connect('button_press_event', self.onclick)

        toolbar = NavigationToolbar2Tk(self.canvascoordinate,self.labelframepositionpad)
        toolbar.update()






#Update canvas
        self.update_canvas()

    def updatecoordinateplot(self):

        self.coordinates.clear()
        self.coordinates = self.fig.add_subplot(111)
        self.coordinates.plot(self.eventx, self.eventy, 'bo', markersize=5)


        self.coordinates.set_xlim(-65, 65)
        self.coordinates.set_ylim(-65, 65)

        # Change major ticks to show every 10.
        self.coordinates.xaxis.set_major_locator(MultipleLocator(10))
        self.coordinates.yaxis.set_major_locator(MultipleLocator(10))

        # Change minor ticks to show every 2.
        self.coordinates.xaxis.set_minor_locator(AutoMinorLocator(2))
        self.coordinates.yaxis.set_minor_locator(AutoMinorLocator(2))

        self.coordinates.grid(which='major', color='#CCCCCC', linestyle='--')
        self.coordinates.grid(which='minor', color='#CCCCCC', linestyle=':')

        self.canvascoordinate.draw()


    def onclick(self,event):
        self.eventx = event.xdata
        self.eventy = event.ydata
        print(event.xdata,event.ydata)


    def changerecCB(self):
        self.cont.recticlecb = self.recticleCBVar.get()

    def update_canvas(self):
        self.updatecoordinateplot
        try:
            self.img = self.cont.show_original()
            self.img = cv2.cvtColor(self.img, cv2.COLOR_BGR2RGB)
            self.img = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(self.img))
            self.canvas.create_image(2, 2, image=self.img, anchor=tk.NW)
        except:
            pass



        self.after(self.delay, self.update_canvas)




class Parameters(tk.Frame):
    def __init__ (self, parent, cont):
        tk.Frame.__init__(self, parent)



app = App()
app.mainloop()
