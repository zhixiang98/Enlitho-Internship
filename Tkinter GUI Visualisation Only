from pipython import GCSDevice,pitools
import tkinter as tk
import cv2
from tkinter import ttk
import PIL.Image,PIL.ImageTk
import threading
from tkinter import filedialog
import pandas as pd
import time


class LinearStage:
    def __init__(self,axis):
        self.axis = axis

class Camera:
    def __init__(self):
        self.cap = cv2.VideoCapture(0)
        self.width = 640
        self.height = 480
        self.cap.set(3, self.width)
        self.cap.set(4, self.height)
        self.recticlecb = False

    def show_original(self):
        success, img =  self.cap.read()
        if self.recticlecb == True:
            img = cv2.line(img,(int(self.width/2),0),(int(self.width/2),int(self.height)),(0,0,255),1)
            img = cv2.line(img,(0,int(self.height/2)),(int(self.width), int(self.height/2)),(0,0,255),1)
        return img

class App(tk.Tk, Camera, LinearStage):
    def __init__(self,*args,**kwargs):
        tk.Tk.__init__(self, *args,**kwargs)
        Camera.__init__(self)
        self.x = LinearStage(1)
        self.connect = False
        self.geometry("1050x1000")
        container = tk.Frame(self)
        container.grid()

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frames = {}


        for F in (Overview, Parameters):
            frame = F(container,self)
            self.frames[F] = frame
            frame.grid(row = 0, column = 0, sticky ='nsew')

        self.mymenu = tk.Menu(self)
        self.config(menu=self.mymenu)
        Main = tk.Menu(self.mymenu)
        WaffleSettings =tk.Menu(self.mymenu)
        self.mymenu.add_cascade(label = "LinearStage", menu = Main)
        self.mymenu.add_cascade(label = "Waffle_Setup", menu = WaffleSettings)
        Main.add_command(label = "Overview", command = lambda: self.show_frame(Overview))
        WaffleSettings.add_command(label = "Parameters", command = lambda:self.show_frame(Parameters))


        self.show_frame(Overview)

    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()




class Overview(tk.Frame):
    def __init__ (self, parent, cont):
        tk.Frame.__init__(self,parent)
        end_column = 10
        begin_column = 0

        self.cont = cont
        self.delay = 80



        ##Current Position##
        self.labelbox = tk.LabelFrame(self, text = "Current Position",padx = 10, pady = 10)
        self.labelbox.grid(row = 2, column =begin_column, sticky = "NSEW")
        self.xposlabel = tk.Label(self.labelbox,text = "X Pos: ").grid(row = 1, column = 0)
        self.yposlabel = tk.Label(self.labelbox, text = "Y Pos: ").grid(row = 3, column = 0)

        self.xposvar = tk.StringVar()
        self.yposvar = tk.StringVar()

        self.X_POS = tk.Label(self.labelbox,textvariable = self.xposvar, bg = "light blue").grid(row = 1, column = 1)
        self.Y_POS = tk.Label(self.labelbox,textvariable = self.yposvar, bg = "light blue").grid(row = 3, column = 1)

        #create initialisation button
        self.Initialisation_button = tk.Button(self.labelbox, text = "Initialisation", width =10, command = lambda:self.Initialise_stage())
        self.Initialisation_button.grid(row = 4, column = 0)
        #Current image
        self.canvas = tk.Canvas(self,height = 480, width = 640,bd =None, bg = 'Red' )
        self.canvas.grid (row =1,column =0,columnspan = end_column)
        self.recticleCBVar = tk.BooleanVar()
        self.recticleCB = tk.Checkbutton(self, text = "Recticle", variable = self.recticleCBVar, command = lambda:self.changerecCB()).grid(row = 2,column = 4)



######### Velocity
        ## Current Velocity
        self.currentvel = tk.StringVar()
        self.SetSlowVelVar = tk.DoubleVar()
        self.SetMediumVelVar = tk.DoubleVar()
        self.SetFastVelVar = tk.DoubleVar()


        self.labelbox0 = tk.LabelFrame(self, text=" Velocity", padx=10, pady=10)
        self.labelbox0.grid(row=3, column=begin_column, sticky = "NSEW")
        self.current_vel_label = tk.Label(self.labelbox0, textvariable =self.currentvel,bg = "light blue").grid(row=1, column=1,sticky = 'NW')
        self.current_vel_label1 = tk.Label(self.labelbox0, text = "Current Velocity: ").grid(row = 1,column = 0)

        ## Set Velocity
        self.setSlowVelLabel = tk.Label(self.labelbox0,text = "Set Slow Velocity(mm/s): ").grid(row = 2, column = 0,sticky = "W")
        self.setSlowVelEntryBox = tk.Entry(self.labelbox0, width = 5, textvariable = self.SetSlowVelVar).grid(row = 2,column =1)
        self.setSlowVelButton = tk.Button(self.labelbox0, text = "Confirm", command = lambda:self.set_Vel()).grid(row = 3,column = 0, columnspan = 2)

        self.setMediumVelLabel = tk.Label(self.labelbox0,text = "Set Normal Velocity(mm/s): ").grid(row = 4, column = 0, sticky = "W")
        self.setMediumVelEntryBox = tk.Entry(self.labelbox0, width=5, textvariable=self.SetMediumVelVar).grid(row=4, column=1)
        self.setMediumVelButton = tk.Button(self.labelbox0, text="Confirm", command=lambda: self.set_Vel()).grid(row=5, column=0, columnspan=2)

        self.setFastVelLabel = tk.Label(self.labelbox0, text="Set Fast Velocity(mm/s): ").grid(row=6, column=0, sticky = "W")
        self.setFastVelLabel = tk.Entry(self.labelbox0, width=5, textvariable=self.SetMediumVelVar).grid(row=6, column=1)
        self.setFastVelButton = tk.Button(self.labelbox0, text="Confirm", command=lambda: self.set_Vel()).grid(row=7, column=0, columnspan=2)

        ## Arrow Movement configuration
        self.uparrow = PIL.ImageTk.PhotoImage(file = r"Arrow/arrow_up.png")
        self.downarrow = PIL.ImageTk.PhotoImage(file = r"Arrow/arrow_down.png")
        self.leftarrow = PIL.ImageTk.PhotoImage(file = r"Arrow/arrow_left.png")
        self.rightarrow = PIL.ImageTk.PhotoImage(file = r"Arrow/arrow_right.png")

        self.ArrowMovementFrame = tk.LabelFrame(self, text = "Arrow Move", padx = 10, pady = 10)
        self.ArrowMovementFrame.grid(row = 3, column = 2, columnspan = 4,sticky = "NSEW")
        self.uparrowbutton = tk.Button(self.ArrowMovementFrame, width = 50, height = 50, image = self.uparrow).grid(row = 0, column = 1)
        self.downarrowbutton = tk.Button(self.ArrowMovementFrame,width = 50, height = 50, image =self.downarrow).grid(row = 2, column = 1)
        self.leftarrowbutton = tk.Button(self.ArrowMovementFrame, width=50, height=50, image=self.leftarrow).grid(row=1, column=0)
        self.rightarrowbutton = tk.Button(self.ArrowMovementFrame, width=50, height=50, image=self.rightarrow).grid(row=1, column=3)



        ##Move to Abs Position##
        self.labelbox1 = tk.LabelFrame(self, text ="Move to Absolute Position",padx = 10, pady = 10)
        self.labelbox1.grid(row = 2, column = 2,sticky = "NW")
        self.moveabsposxlabel = tk.Label(self.labelbox1, text = "X Pos: ").grid(row =1, column =0)
        self.moveabsposylabel = tk.Label(self.labelbox1, text = "Y Pos: ").grid(row =3, column =0)

        self.move_abs_posx_var = tk.DoubleVar()
        self.move_abs_posy_var = tk.DoubleVar()

        self.moveabsposx = tk.Entry(self.labelbox1, width = 10, textvariable = self.move_abs_posx_var ).grid(row = 1,column = 1)
        self.moveabsposy = tk.Entry(self.labelbox1, width  = 10, textvariable = self.move_abs_posy_var).grid(row = 3, column = 1)
        self.movebutton = tk.Button (self.labelbox1, width = 10, text = "Confirm", command = lambda: self.set_abs_posx()).grid(row = 4, column = 1)

        ##Move to Rel Position##
        self.labelbox2 = tk.LabelFrame(self, text="Move to Relative Position", padx=10, pady=10)
        self.labelbox2.grid(row=2, column=3)
        self.moverelposxlabel = tk.Label(self.labelbox2, text="X Pos: ").grid(row=1, column=0)
        self.moverelposylabel = tk.Label(self.labelbox2, text="Y Pos: ").grid(row=3, column=0)

        self.move_rel_posx_var = tk.DoubleVar()
        self.move_rel_posy_var = tk.DoubleVar()

        self.moverelposx = tk.Entry(self.labelbox2, width=10, textvariable=self.move_rel_posx_var).grid(row=1, column=1)
        self.moverelposy = tk.Entry(self.labelbox2, width=10, textvariable=self.move_rel_posy_var).grid(row=3, column=1)
        self.movebutton1 = tk.Button(self.labelbox2, width=10, text="Confirm", command=lambda: self.set_rel_posx()).grid(
            row=4, column=1)

        ##Graphical Coordinate

        self.eventx = 0
        self.eventy = 0



        #positionpad label frame
        self.labelframepositionpad = tk.LabelFrame(self,text = "Position Pad")
        self.labelframepositionpad.grid(row = 1, column = 11, sticky = "NSEW")

        self.CanvasPositionPad = tk.Canvas(self.labelframepositionpad, height = 400, width = 400, bd = None, bg = 'blue')
        self.CanvasPositionPad.grid(row = 0, column = 0,columnspan =4)

        self.CanvasPositionPad.bind("<Button-1>", self.onclick)
        #target location
        self.targetxvar = tk.StringVar()
        self.targetyvar = tk.StringVar()
        self.targetxlabel = tk.Label(self.labelframepositionpad, text = "Target X Pos: ").grid(row = 1, column =0)
        self.targetylabel = tk.Label(self.labelframepositionpad, text = "Target Y Pos: ").grid(row = 1, column =2)
        self.targetxval = tk.Label(self.labelframepositionpad, textvariable = self.targetxvar, bg = "light blue").grid(row = 1, column = 1)
        self.targetyval = tk.Label(self.labelframepositionpad, textvariable = self.targetyvar, bg = "light blue").grid(row = 1, column = 3)


        #Treeview
        self.treeviewframe = tk.LabelFrame (self,text = "Treeview", padx = 10, pady= 10)
        self.treeviewframe.grid(row = 2, column = 11, rowspan = 10)
        self.treeview = ttk.Treeview(self.treeviewframe)
        self.treeview['columns'] = ("Command","x_value","y_value","step")
        self.treeview.column("#0", width=0, stretch="NO")
        self.treeview.column("Command", anchor="w", width=120)
        self.treeview.column("x_value", anchor="center", width=80)
        self.treeview.column("y_value", anchor="center", width=80)
        self.treeview.column("step", anchor="center", width=80)

        self.treeview.heading("#0", text="", anchor="w")
        self.treeview.heading("Command", text="Command", anchor="w")
        self.treeview.heading("x_value", text="x_value", anchor="w")
        self.treeview.heading("y_value", text="y_value", anchor="w")
        self.treeview.heading("step", text="Step", anchor="center")

        #tree binding
        # self.treeview.bind("<ButtonRelease-1>", self.clickertree)

        self.treeview.grid(row = 0, column  = 0, columnspan = 4)


            #New Data entry
        self.entrybutton = tk.Button(self.treeviewframe, text = "Insert" ,width = 10, command = lambda:self.newentry())
        self.entrybutton.grid(row = 4, column = 0, pady = 5)

            #Remove entry
        self.removentrybutton = tk.Button(self.treeviewframe, text="Remove",width = 10, command=lambda: self.removentry())
        self.removentrybutton.grid(row=4, column=1)

            #moveup entry
        self.moveupentrybutton = tk.Button(self.treeviewframe, text = "Move Up",width = 10, command = lambda: self.moveuptree())
        self.moveupentrybutton.grid(row = 4, column =2)

            #movedown entry
        self.movedownbutton = tk.Button(self.treeviewframe, text = "Move Down",width = 10,  command = lambda: self.movedowntree())
        self.movedownbutton.grid(row = 4, column =3)

            # Import Excel file
        self.filebutton = tk.Button(self.treeviewframe, text  = "Import",width = 10, command = lambda:self.fileopen())
        self.filebutton.grid (row = 5, column  = 0)
            #Clear all in treeview
        self.clearallbutton = tk.Button(self.treeviewframe, text = "Clear All",width = 10, command = lambda:self.clearall())
        self.clearallbutton.grid(row = 5, column = 1)
            # Execute
        self.executetree = tk.Button(self.treeviewframe,  text = "Execute", width = 24, command = lambda:self.executiontree())
        self.executetree.grid(row = 5, column =2, columnspan = 2)

            # Input new data field
        self.commandlabel = tk.Label(self.treeviewframe,text = "Command")
        self.commandlabel.grid(row = 1, column = 0)

        self.treexlabel = tk.Label(self.treeviewframe, text = "x-value")
        self.treexlabel.grid(row = 1, column = 1)

        self.treeylabel = tk.Label(self.treeviewframe, text = "y-label")
        self.treeylabel.grid(row = 1, column  = 2)

        self.step = tk.Label(self.treeviewframe, text = "Step")
        self.step.grid(row =1 , column = 3)

        self.commandentry = tk.Entry(self.treeviewframe, width = 15)
        self.commandentry.grid(row = 2,column = 0)

        self.treexentryx = tk.Entry(self.treeviewframe, width = 15)
        self.treexentryx.grid(row = 2, column =1)

        self.treeyentry = tk.Entry(self.treeviewframe, width = 15)
        self.treeyentry.grid(row=2, column=2)

        self.stepentry = tk.Entry(self.treeviewframe, width = 15)
        self.stepentry.grid(row=2, column=3)

        #Update canvas
        self.update_canvas()
        self.update_positionpad()


    def moveuptree(self):
        rows = self.treeview.selection()
        for row in rows:
            self.treeview.move(row,self.treeview.parent(row), self.treeview.index(row)-1 )

    def movedowntree(self):
        rows = self.treeview.selection()
        for row in reversed(rows):
            self.treeview.move(row, self.treeview.parent(row),self.treeview.index(row)+1)

    def removentry(self):
        rows = self.treeview.selection()
        print(rows)
        for row in rows:
            self.treeview.delete(row)

    # Open file function
    def fileopen(self):
        filename  = filedialog.askopenfilename(initialdir = "C:/documents", title = "Open file", filetype = (("xlsx files", "*.xlsx"),("All Files","*.*")))
        if filename:
            try:
                file = r"{}".format(filename)
                df = pd.read_excel(file)
                df = df.fillna("")
                df_rows = df.to_numpy().tolist()
            except ValueError:
                print("File could not be read")
            except FileNotFoundError:
                print("File could not be found")
        for row in df_rows:
            self.treeview.insert("","end", values = row)
    #clear all from treeview
    def clearall(self):
        self.treeview.delete(*self.treeview.get_children())

    #add entry
    def newentry(self):
        if self.commandentry.get() == '' and self.treexentryx.get() =='' and self.treeyentry.get()=='' and self.stepentry.get()=='':
            print('nothing!')
            pass
        else:
            self.treeview.insert('', 'end', values=(self.commandentry.get(), self.treexentryx.get(), self.treeyentry.get(), self.stepentry.get()))
            self.commandentry.delete(0,'end')
            self.treexentryx.delete(0, 'end')
            self.treeyentry.delete(0,'end')
            self.stepentry.delete(0,'end')


    def executiontree(self):
        # print("selection: ")
        # for items in self.treeview.selection():
        #     item_text = self.treeview.item(items)
        #     print(item_text)
        #     itemlst = item_text.get('values')
        #     print(type(itemlst[2]))
        #     print(float(itemlst[2]))
        self.executelist = []
        for items in self.treeview.get_children():
            item_text = self.treeview.item(items)
            item_text = item_text.get('values')
            self.executelist.append(item_text)

        command = threading.Thread(target = self.executionfunction, args= (self.executelist,))
        command.start()
        # print(self.executelist)


    def executionfunction(self, instructions):
        for commands in instructions:
            if commands[0] == "Move":
                print("Moving" + str(commands[1]) +'xpos' + str(commands[2]) +'ypos')
                time.sleep(3)
                print("slept 3 seconds")
            elif commands[0] == "MoveRelative":
                print("Moving to relative" + str(commands[1]) + 'x pos' + str(commands[2]) + 'y pos')
            elif commands[0]== "Step":
                print("Stepping")


    # Position Pad clicker
    def onclick(self,event):
        if self.CanvasPositionPad.canvasx(event.x) <50 or self.CanvasPositionPad.canvasy(event.y) <48 or self.CanvasPositionPad.canvasx(event.x) >360 or self.CanvasPositionPad.canvasy(event.y)>356:
            print("Out of coordinate frame!")
        else:

            self.eventx = self.CanvasPositionPad.canvasx(event.x)
            self.eventy = self.CanvasPositionPad.canvasy(event.y)
            self.pospadx = self.convert_canvas_coord_to_pospad(self.eventx,1)
            self.pospady = self.convert_canvas_coord_to_pospad(self.eventy,2)
            self.targetxvar.set(str(self.pospadx))
            self.targetyvar.set(str(self.pospady))


    def convert_canvas_coord_to_pospad(self,numbers,xy):
        if xy == 1:
            scale = 130/310
            magnitude = (numbers - 50)*scale
            magnitude = magnitude - 65


        if xy == 2:
            scale = 130/308
            magnitude = (numbers - 48)*scale
            magnitude = 65 - magnitude
        return magnitude


    def changerecCB(self):
        self.cont.recticlecb = self.recticleCBVar.get()

    def update_canvas(self):
        try:
            self.img = self.cont.show_original()
            self.img = cv2.cvtColor(self.img, cv2.COLOR_BGR2RGB)
            self.img = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(self.img))
            self.canvas.create_image(2, 2, image=self.img, anchor=tk.NW)
        except:
            pass
        self.after(self.delay, self.update_canvas)


    def update_positionpad(self):

        self.positionpadimg = cv2.imread('PositionPad.png')
        self.positionpadimg = cv2.circle(self.positionpadimg,(int(self.eventx),int(self.eventy)),3,(255,0,0),1)
        self.positionpadimg= PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(self.positionpadimg))
        self.CanvasPositionPad.create_image(2,2,image = self.positionpadimg,anchor = tk.NW)
        self.after(self.delay,self.update_positionpad)



class Parameters(tk.Frame):
    def __init__ (self, parent, cont):
        tk.Frame.__init__(self, parent)



app = App()
app.mainloop()
